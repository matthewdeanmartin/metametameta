[project]
name = "source_todo"
version = "0.1.0"
description = "TODOs in source code as a first class construct"
authors = [{ name = "Matthew Martin", email = "matthewdeanmartin@gmail.com" }]
requires-python = ">=3.9"
dependencies = [
    "metametameta"
]

[project.scripts]
source_todo = "source_todo.__main__:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"
#
# contract
# griffe = ">=0.38.1"


[tool.black]
line-length = 120
target-version = ['py39']
include = '\.pyi?$'
exclude = '''

(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
  | foo.py           # also separately exclude a file named foo.py in
                     # the root of the project
)
'''

[tool.pytest.ini_options]
minversion = "6.0"
testpaths = [
    "test",
    "tests"
]
junit_family = "xunit1"
norecursedirs = ["vendor", "scripts"]
# don't know how to do this in toml
#addopts = "--strict-markers"
#markers =
#	slow: marks tests as slow (deselect with '-m "not slow"')
#	fast: marks tests as fast (deselect with '-m "not fast"')

[tool.isort]
default_section = "THIRDPARTY"
force_grid_wrap = 0
include_trailing_comma = true
known_first_party = ["dedlin"]
line_length = 120
multi_line_output = 3
use_parentheses = true

[tool.ruff]
line-length = 1000

# Enable Pyflakes `E` and `F` codes by default.
lint.select = ["E", "F",
    "D", # docs
    "UP", # pyupgrade
    "B", # bugbear
]
lint.ignore = [
    "D402",
    "D301", # messes with doctests
    "E722",
    # only track structural problems with docstrings, not whitespace, nor missing
    "D200", "D212", "D415", "D411", "D205", "D102", "D103", "D100", "D107", "D101", "D104", "D105",
    "UP007", "UP038", # Not sure if | is well supported in lowever versions of python
]
lint.per-file-ignores = { }

# Allow unused variables when underscore-prefixed.
lint.dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Exclude a variety of commonly ignored directories.
exclude = [
    "dead_code",
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Assume Python 3.10.
target-version = "py311"


[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.scriv]
version = "literal: pyproject.toml: tool.poetry.version"
format = "md"
main_branches = "master, main, develop, dev"


[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",
    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
]

[tool.cli-tools]
python = {name = "python", version = ">=3.11.1", schema = "semver", tags = ["build"]}
# pipx = {name = "pipx", version = ">=1.0.0", version_switch = "--version", schema = "semver"}
mypy = {name = "mypy", version = ">=1.0.0", schema = "semver", tags = ["build", "work"], install_command = "pipx install mypy", install_docs = "https://mypy.readthedocs.io/en/stable/getting_started.html"}
pylint = {name = "pylint", version = ">=1.0.0", schema = "semver", tags = ["build", "work", "user"]}
black = {name = "black", version = ">=1.0.0", schema = "semver"}
ruff = {name = "ruff", version = ">=0.6.2", schema = "semver"}
vulture = {name = "vulture", version = "*", schema = "semver"}
poetry = {name = "poetry", version = ">=1.5.1", schema = "semver"}



[tool.strict-build-script]
minimum_test_coverage = 43
